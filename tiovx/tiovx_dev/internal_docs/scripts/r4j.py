# Copyright (c) 2020 Texas Instruments

##########################################################################
# VALIDATE R4J ITEMS
#
# Usage: python r4j.py <r4j_csvfile> <jirafilter_csvfile> <JIRA Component Prefix>
#
# Example: python r4j.py r4j.csv jirafilter.csv TIOVX
#
# r4j.csv can be generated by first exporting the R4J as an Excel spreadsheet then
# saving as a CSV.  This should be done on a Linux machine to avoid encoding issues
# seen by doing this on Windows.
#
# Below filters is used to generate jirafilter.csv for TIOVX
#
# project = TIOVX AND issuetype=Requirement AND fixVersion = TIOVX_02.00.00
# AND (status = Approved OR status = Implemented)
#
# Author: Lucas Weaver - TI
##########################################################################

import csv
import re
import sys

r4j_name        = sys.argv[1]
jirafilter_name = sys.argv[2]
component       = sys.argv[3]

with open(r4j_name) as r4j_csvfile:
    with open(jirafilter_name) as jirafilter_csvfile:

        r4j_list = []
        jirafilter_list = []

        # Parse CSV file
        r4j_readCSV = csv.DictReader(r4j_csvfile, delimiter=',')
        jirafilter_readCSV = csv.DictReader(jirafilter_csvfile, delimiter=',')

        # Populating requirement lists
        for row in r4j_readCSV:
            if row["Issue Key"].startswith(component):
                r4j_list.append(row["Issue Key"])

        for row in jirafilter_readCSV:
            if row["Issue key"].startswith(component):
                jirafilter_list.append(row["Issue key"])


        # Sorting lists
        r4j_list.sort()
        jirafilter_list.sort()

        if r4j_list == jirafilter_list: 
            print ("R4J and Jira filter are identical") 
        else : 
            print ("R4J and Jira filter not identical") 


        r4j_inclusive = []
        for item in r4j_list:
          if item not in jirafilter_list:
            r4j_inclusive.append(item)

        jirafilter_inclusive = []
        for item in jirafilter_list:
          if item not in r4j_list:
            jirafilter_inclusive.append(item)

        if r4j_inclusive:
            print("The following items are in R4J but not in JIRA filter:")
            for item in r4j_inclusive:
                print(item)

        if jirafilter_inclusive:
            print("The following items are in JIRA filter but not in R4J:")
            for item in jirafilter_inclusive:
                print(item)



