#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Nov 29 14:54:18 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- $arg
    }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1

set demo [lindex $argv 0];
set delay [lindex $argv 1];
set ds [lindex $argv 2]
set cameras [lindex $argv 3]
set single [lindex $argv 4]

set mul "[expr 3 * $cameras]"
set camera_sleep "[expr 6 + $mul]"

spawn ./$demo

sleep 2

if {$cameras != 0} {

    if {$single != 0} {
        # Channel Number
        send -- "0\r"
        sleep 1
    }

    # Camera Selection
    send -- "a\r"
    sleep 1

    # LDC On
    send -- "1\r"
    sleep 1

    if {$single == 0} {
        # Num Cameras
        send -- "${cameras}\r"
    }

    sleep $camera_sleep
}

if {$ds == 1} {
    # capture data sheets
    sleep $delay
    send_user "... capturing datasheet\n"
    send -- "p\r"
    sleep $delay
    send -- "e\r"
} else {
    sleep $delay
}

sleep 2

send -- "x\r"
expect eof
